package Mojolicious::Plugin::Webpack;
use Mojo::Base 'Mojolicious::Plugin';

use Mojo::ByteStream 'b';
use Mojo::File 'path';
use Mojo::IOLoop::Subprocess;
use Mojo::JSON;

our $VERSION = '0.01';

sub assets_dir { $_[0]->{assets_dir} }
sub daemon     { $_[0]->{daemon} }

has dependencies => sub {
  return {
    core => [qw(webpack-cli webpack webpack-md5-hash clean-webpack-plugin html-webpack-plugin)],
    css  => [qw(css-loader mini-css-extract-plugin optimize-css-assets-webpack-plugin)],
    js   => [qw(@babel/core @babel/preset-env babel-loader uglifyjs-webpack-plugin)],
    sass => [qw(node-sass sass-loader)],
    vue  => [qw(vue vue-loader vue-template-compiler)],
  };
};

sub env     { $_[0]->{env} }
sub out_dir { $_[0]->{out_dir} }
sub process { [@{$_[0]->{process} || []}] }

sub register {
  my ($self, $app, $config) = @_;

  $self->{$_} = path $config->{$_} for grep { $config->{$_} } qw(assets_dir out_dir);
  $self->{assets_dir} ||= path $app->home->rel_file('assets');
  $self->{out_dir} ||= path $app->static->paths->[0], 'asset';
  $self->{env}         = $config->{env} // $app->mode;
  $self->{process}     = $config->{process} || ['js'];
  $self->{source_maps} = $config->{source_maps} // 1;

  $self->dependencies->{$_} = $config->{dependencies}{$_} for keys %{$config->{dependencies} || {}};
  $self->_run_webpack($app) if $ENV{MOJO_WEBPACK_ARGS} // 1;
  $app->helper(asset => sub { _asset($self, @_) });
}

sub _asset {
  my ($self, $c, @args) = @_;
  return $self unless @args;
  return b '<script>/* $c->asset("TODO") */</script>';
}

sub _generate {
  my ($self, $app, $name, $out_file) = @_;
  my $is_generated = '';

  eval {
    $out_file ||= $app->home->rel_file($name);
    my $CFG = $out_file->open('<');
    /Autogenerated\s*by\s*Mojolicious-Plugin-Webpack/i and $is_generated = $_ while <$CFG>;
  };

  return 'custom' if !$is_generated and -r $out_file;
  return 'current' if $is_generated =~ /\b$VERSION\b/;

  my $template = $self->_share_dir->child($name)->slurp;
  $template =~ s!__AUTOGENERATED__!Autogenerated by Mojolicious-Plugin-Webpack $VERSION!g;
  $template =~ s!__NAME__!{$app->moniker}!ge;
  $template =~ s!__VERSION__!{$app->VERSION || '0.0.1'}!ge;
  $out_file->spurt($template);
  return 'generated';
}

sub _environment_variables {
  my $self = shift;
  my %env  = %ENV;

  $env{NODE_ENV} ||= $self->env;
  $env{WEBPACK_ASSETS_DIR} = $self->assets_dir;
  $env{WEBPACK_OUT_DIR}    = $self->out_dir;
  $env{WEBPACK_SHARE_DIR}    //= $self->_share_dir;
  $env{WEBPACK_AUTO_CLEANUP} //= $self->{auto_cleanup} // 1;
  $env{WEBPACK_SOURCE_MAPS}  //= $self->{source_maps} // 1;
  $env{uc "WEBPACK_RULE_FOR_$_"} = 1 for @{$self->process};

  return \%env;
}

sub _install_node_deps {
  my ($self, $app) = @_;
  my $package_json = Mojo::JSON::decode_json($app->home->rel_file('package.json')->slurp);
  my $n            = 0;

  system qw(npm install) if %{$package_json->{dependencies}} and !-d $app->home->rel_file('node_modules');

  for my $preset ('core', @{$self->process}) {
    for my $module (@{$self->dependencies->{$preset} || []}) {
      next if $package_json->{dependencies}{$module};
      warn "[Webpack] npm install $module\n" if $ENV{MOJO_WEBPACK_DEBUG};
      system npm => install => $module;
      $n++;
    }
  }

  return $n;
}

sub _run_webpack {
  my ($self, $app) = @_;
  my $config_file = $app->home->rel_file('webpack.config.js');
  my $env         = $self->_environment_variables;

  $self->_generate($app, 'package.json');
  $self->_generate($app, 'webpack.config.js');
  $self->_generate($app, 'webpack.custom.js',
    $self->assets_dir->child(sprintf 'webpack.%s.js', $ENV{WEBPACK_CUSTOM_NAME} || 'custom'));
  $self->_install_node_deps($app);

  unless (-e $env->{WEBPACK_OUT_DIR}) {
    path($env->{WEBPACK_OUT_DIR})->make_path;
  }
  unless (-w $env->{WEBPACK_OUT_DIR}) {
    warn "[Webpack] Cannot write to $env->{WEBPACK_OUT_DIR}\n" if $ENV{MOJO_WEBPACK_DEBUG};
    return;
  }

  my @cmd = $env->{WEBPACK_BINARY} || $app->home->rel_file('node_modules/.bin/webpack');
  push @cmd, '--config' => $config_file->to_string;
  push @cmd, '--env'    => $self->env;
  push @cmd, '--cache',   '--progress' if $self->env eq 'development';
  push @cmd, '--profile', '--verbose'  if $ENV{MOJO_WEBPACK_VERBOSE};
  push @cmd, split /\s+/, +($ENV{MOJO_WEBPACK_ARGS} || '');

  warn "[Webpack] @cmd\n" if $ENV{MOJO_WEBPACK_DEBUG};
  map { warn "[Webpack] $_=$env->{$_}\n" } grep {/^WEBPACK_/} sort keys %$env if $ENV{MOJO_WEBPACK_DEBUG};
  local %ENV = %$env;
  return system @cmd unless grep {/--watch/} @cmd;
  $self->{daemon} = Mojo::IOLoop::Subprocess->new->run(sub { %ENV = %$env; system @cmd }, sub { });
}

sub _share_dir {
  state $share = path(path(__FILE__)->dirname, 'Webpack');
}

1;
