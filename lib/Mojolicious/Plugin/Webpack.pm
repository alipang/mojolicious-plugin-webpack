package Mojolicious::Plugin::Webpack;
use Mojo::Base 'Mojolicious::Plugin';

use Mojo::ByteStream 'b';
use Mojo::File 'path';

our $VERSION = '0.01';

sub register {
  my ($self, $app, $config) = @_;

  $self->_run_webpack($app, $config) if $ENV{MOJO_WEBPACK_BUILD} // 1;
  $app->helper(asset => sub { return b '<script>/* $c->asset("TODO") */</script>' });
}

sub _generate {
  my ($self, $dir, $name) = @_;
  my $file = path $dir, $name;
  my $is_generated = '';

  eval {
    my $CFG = $file->open('<');
    /Autogenerated\s*by\s*Mojolicious-Plugin-Webpack/i and $is_generated = $_ while <$CFG>;
  };

  return 'Custom' if !$is_generated and -r $file;
  return 'Current' if $is_generated =~ /\b$VERSION\b/ and !$ENV{MOJO_WEBPACK_REGENERATE};

  my $template = path(path(__FILE__)->dirname, 'Webpack', $name)->slurp;
  $template =~ s!__AUTOGENERATED__!// Autogenerated by Mojolicious-Plugin-Webpack $VERSION!;
  $file->spurt($template);
  return 'Generated';
}

sub _generate_entries {
  my ($self, $dir) = @_;

  my $entries = path $dir, 'webpack-entries.js';
  return if -r $entries and !$ENV{MOJO_WEBPACK_REGENERATE};

  $entries->spurt(<<"HERE");
// assetsDir = "$dir";
module.exports = function(assetsDir) {
  return {
    "my_app": assetsDir + '/js/app.js',
  };
};
HERE
}

sub _install_node_deps {
  my ($self, $dir) = @_;

  # TODO: Make this smarter
  system qw(npm install) unless -d path $dir, 'node_modules';
}

sub _run_webpack {
  my ($self, $app, $config) = @_;
  my $config_file = path($config->{config_file} || $app->home->rel_file('webpack.config.js'));

  local %ENV = %ENV;
  $ENV{NODE_ENV}            ||= $app->mode;
  $ENV{WEBPACK_ASSETS_DIR}  ||= $config->{assets_dir} || $app->home->rel_file('assets');
  $ENV{WEBPACK_OUT_DIR}     ||= $config->{out_dir};
  $ENV{WEBPACK_OUT_DIR}     ||= path(+(grep {-w} @{$app->static->paths})[0] || '/read/only', 'asset');
  $ENV{WEBPACK_SOURCE_MAPS} ||= $config->{source_maps} // 1;
  $ENV{uc "WEBPACK_RULE_FOR_$_"} = 1 for @{$config->{process}};

  $self->_generate($config_file->dirname, 'package.json');
  $self->_generate($config_file->dirname, 'webpack.config.js');
  $self->_generate_entries($ENV{WEBPACK_ASSETS_DIR});
  $self->_install_node_deps($config_file->dirname);

  unless (-e $ENV{WEBPACK_OUT_DIR}) {
    path($ENV{WEBPACK_OUT_DIR})->make_path;
  }
  unless (-w $ENV{WEBPACK_OUT_DIR}) {
    warn "[Webpack] Cannot write to $ENV{WEBPACK_OUT_DIR}\n" if $ENV{MOJO_WEBPACK_DEBUG};
    return;
  }

  my @cmd = $config->{webpack} || $app->home->rel_file('node_modules/.bin/webpack');
  push @cmd, '--config' => $config_file->to_string;
  push @cmd, '--env'    => $config->{env} // $app->mode;
  push @cmd, '--cache', '--progress' if ($config->{env} || $app->mode) eq 'development';
  push @cmd, '--hot', '--watch' if $config->{hot};
  push @cmd, '--profile', '--verbose' if $ENV{MOJO_WEBPACK_VERBOSE};

  warn "[Webpack] @cmd\n" if $ENV{MOJO_WEBPACK_DEBUG};
  system @cmd;
}

1;
