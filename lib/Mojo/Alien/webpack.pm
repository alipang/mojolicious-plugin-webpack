package Mojo::Alien::webpack;
use Mojo::Base -base;

use Carp qw(croak);
use File::chdir;
use Mojo::Alien::npm;
use Mojo::File qw(path tempfile);
use Mojo::Loader;
use POSIX ':sys_wait_h';
use Time::HiRes qw(sleep);

use constant DEBUG => ($ENV{MOJO_ROLLUP_DEBUG} || $ENV{MOJO_WEBPACK_DEBUG}) && 1;

# TODO
our $VERSION = $Mojolicious::Plugin::Webpack::VERSION || '0.01';

has assets_dir => sub { shift->config->dirname->child('assets') };

has command => sub {
  my $self = shift;
  return [$ENV{MOJO_WEBPACK_BINARY}] if $ENV{MOJO_WEBPACK_BINARY};
  my $bin = $self->config->to_abs->dirname->child(qw(node_modules .bin webpack));
  $self->_d('%s %s', -e $bin ? 'Found' : 'Not installed', $bin) if DEBUG;
  return -e $bin ? [$bin->to_string] : ['webpack'];
};

has config => sub { path->to_abs->child('webpack.config.js') };

has dependencies => sub {
  return {
    core => [qw(webpack webpack-cli)],
    css  => [qw(css-loader mini-css-extract-plugin css-minimizer-webpack-plugin)],
    js   => [qw(@babel/core @babel/preset-env babel-loader terser-webpack-plugin)],
  };
};

has include => sub { +[] };
has mode    => sub { $ENV{NODE_ENV} || 'development' };

has npm => sub {
  my $self = shift;
  Mojo::Alien::npm->new(config => $self->config->dirname->child('package.json'), mode => $self->mode);
};

has out_dir => sub { shift->config->dirname->child('dist') };

sub build {
  my $self = shift;
  croak "Can't call build() after watch()" if $self->pid;

  ($!, $?) = (0, 0);
  $self->_run($self->_cmd_build);
  croak "$self->{basename} $! (exit=$?)"   if $!;
  croak "$self->{basename} failed exit=$?" if !$! and $?;

  return $self;
}

sub init {
  my $self = shift;

  $self->npm->init;
  $self->_render_file($self->_config_template_name, $self->config);

  my $dependencies = $self->npm->dependencies;
  my ($conf_d, @include, %seen) = ($self->assets_dir->child($self->_config_include_dir));
  for my $include ('core', @{$self->include}) {
    for my $package (@{$self->dependencies->{$include} || []}) {
      next if $seen{$package}++;
      $self->npm->install($package) unless $dependencies->{$package}{version};

      my $include_name = "package-$package";
      $include_name =~ s![^\w-]!_!g;

      my $has_template = $self->_resources->{"$include_name.js"} ? 1 : 0;
      my $file         = $conf_d->child("$include_name.js");
      $self->_d('Template %s.js == %s', $include_name, $has_template) if DEBUG;
      $self->_render_file("$include_name.js", $file)                  if $has_template;
      push @include, $include_name if -e $file;
    }

    my $file = $conf_d->child("$include.js");
    push @include, $include if -e $file;
  }

  my $file = $conf_d->child('custom.js');
  push @include, 'custom' if -e $file;

  $self->{env_include} = join ':', @include;
  $self->_d('Include %s', $self->{env_include}) if DEBUG;

  return $self;
}

sub pid {
  my $self = shift;
  return 0 unless $self->{pid};
  my $r = waitpid $self->{pid}, WNOHANG;    # -1 == no such process, >0 if terminated
  return $r == -1 && delete $self->{pid} ? 0 : $r ? 0 : $self->{pid};
}

sub stop {
  my ($self, $tries) = @_;

  $tries ||= 100;
  while (--$tries) {
    return $self unless my $pid = $self->pid;
    local $!;
    kill 15, $pid;
    waitpid $pid, 0;
    sleep $ENV{MOJO_WEBPACK_STOP_INTERVAL} || 0.1;
  }

  $self->{basename} ||= path($self->command->[0])->basename;
  croak "Couldn't stop $self->{basename} with pid @{[$self->pid]}";
}

sub watch {
  my $self = shift;
  return $self if $self->pid;

  my $home = $self->config->dirname->to_string;
  croak "Can't chdir $home: No such file or directory" unless -d $home;

  my @cmd = ($self->_cmd_build, '--watch');
  croak "Can't fork: $!" unless defined(my $pid = fork);

  # Parent
  return $self if $self->{pid} = $pid;

  # Child
  chdir $home or die "Can't chdir to $home: $!";
  $ENV{NODE_ENV}           = $self->mode;
  $ENV{WEBPACK_ASSETS_DIR} = $self->assets_dir->to_string;
  $ENV{WEBPACK_INCLUDE}    = $self->{env_include} || '';
  $ENV{WEBPACK_OUT_DIR}    = $self->out_dir->to_string;
  $self->_d('(%s) cd %s && %s', $$, $home, join ' ', @_) if DEBUG;
  { exec @cmd }
  die "Can't run @cmd: $!";
}

sub _cmd_build {
  my $self = shift;
  $self->init;

  my @cmd = @{$self->command};
  croak "Can't run $cmd[0]" unless -x $cmd[0];

  $self->{basename} ||= path($cmd[0])->basename;
  $self->{stats}    ||= tempfile;
  push @cmd, '--config' => $self->config->to_string;
  push @cmd, sprintf '--json=%s', $self->{stats}->to_string;
  push @cmd, qw(--progress --profile --verbose) if $ENV{MOJO_WEBPACK_VERBOSE};
  return @cmd;
}

sub _config_include_dir   {'webpack.config.d'}
sub _config_template_name {'webpack.config.js'}
sub _d                    { my ($self, $format) = (shift, shift); warn sprintf "[Webpack] $format\n", @_ }

sub _render_file {
  my ($self, $name, $file) = @_;

  if (-e $file) {
    my $version = $file->slurp =~ m!// Autogenerated.*(\d+\.\d+)! ? $1 : -1;
    $self->_d('File %s has version %s in %s', $name, $version, $file) if DEBUG;
    return $self if $version == -1 or (!$ENV{MOJO_WEBPACK_RENDER} and $version == $VERSION);
  }

  $self->_d('Render %s to %s', $name, $file) if DEBUG;
  $file->dirname->make_path unless -d $file->dirname;
  $file->spurt("// Autogenerated by Mojo::Alien::webpack $VERSION\n" . $self->_resources->{$name});
  return $self;
}

sub _resources {
  state $resources = Mojo::Loader::data_section(ref($_[0]) || $_[0]);
}

sub _run {
  my ($self, @cmd) = @_;
  local $CWD                     = $self->config->dirname->to_string;
  local $ENV{NODE_ENV}           = $self->mode;
  local $ENV{WEBPACK_ASSETS_DIR} = $self->assets_dir->to_string;
  local $ENV{WEBPACK_INCLUDE}    = $self->{env_include} || '';
  local $ENV{WEBPACK_OUT_DIR}    = $self->out_dir->to_string;
  $self->_d('cd %s && %s', $CWD, join ' ', @cmd) if DEBUG;
  open my $WEBPACK, '-|', @cmd or die "Can't run @cmd: $!";
  return $WEBPACK if defined wantarray;
  DEBUG && print while <$WEBPACK>;
}

sub DESTROY { shift->stop }

1;

=encoding utf8

=head1 NAME

Mojo::Alien::webpack - Runs the external nodejs program webpack

=head1 SYNOPSIS

  use Mojo::Alien::webpack;
  my $webpack = Mojo::Alien::webpack->new;

  # Run once
  $webpack->build;

  # Build when webpack see files change
  $webpack->watch;

=head1 DESCRIPTION

L<Mojo::Alien::webpack> is a class for runnig the external nodejs program
L<webpack|https://webpack.js.org/>.

=head1 ATTRIBUTES

=head2 assets_dir

  $path = $webpack->assets_dir;
  $webpack = $webpack->assets_dir($webpack->config->dirname->child('assets'))

Location to source assetsa and partial webpack.config.js files.

=head2 command

  $array_ref = $webpack->command;
  $webpack = $webpack->command(['webpack']);

The path to the webpack executable and any custom arguments that is required
for L</build> and L</watch>. This variable tries to find webpack in
"node_modules/" before falling back to just "webpack".

The C<MOJO_WEBPACK_BINARY> environment variable can be set to change the
default.

=head2 config

  $path = $webpack->config;
  $webpack = $webpack->config(path->to_abs->child('webpack.config.js'));

Holds an I</absolute> path to
L<webpack.config.js|https://webpack.js.org/concepts/configuration/>.

=head2 dependencies

  $hash_ref = $webpack->dependencies;

A hash where the keys can match the items in L</include> and the values are
lists of packages to install. Keys that does I</not> match items in L</include>
will be ignored. This attribute will be used by L</init>.

These dependencies are predefined:

  css   => [qw(css-loader mini-css-extract-plugin css-minimizer-webpack-plugin)],
  core  => [qw(webpack webpack-cli)],
  js    => [qw(@babel/core @babel/preset-env babel-loader terser-webpack-plugin)],

=head2 include

  $array_ref = $webpack->include;
  $webpack = $webpack->include([qw(js css)]);

L</include> can be used to install dependencies and load other webpack config
files. The config files included must exist in the "webpack.config.d" sub
directory inside L</assets_dir>. Here is an example of which files that will be
included if they exists:

  # Including "js" and "css" will look for the files below
  $webpack->include[qw(js css)]);

  # - assets/webpack.config.d/package-babel-loader.js
  # - assets/webpack.config.d/package-terser-webpack-plugin.js
  # - assets/webpack.config.d/package-css-loader.js
  # - assets/webpack.config.d/package-css-minimizer-webpack-plugin.js
  # - assets/webpack.config.d/js.js
  # - assets/webpack.config.d/css.js

  # In addition a custom file will always be appended
  # assets/webpack.config.d/custom.js

The L</include> feature is currently EXPERIMENTAL.

=head2 mode

  $str = $webpack->mode;
  $webpack = $webpack->mode('development');

Should be either "development" or "production". Will be used as "NODE_ENV"
environment variable when calling L</build> or L</watch>.

=head2 npm

  $npm = $webpack->npm;

A L<Mojo::Alien::npm> object used by L</init>.

=head2 out_dir

  $path = $webpack->out_dir;
  $webpack = $webpack->out_dir(path('dist')->to_abs);

Location to write output assets to.

=head1 METHODS

=head2 build

  $webpack->build;

Will build the assets or croaks on errors. Automatically calls L</init>.

=head2 init

  $webpack = $webpack->init;

Will install "webpack" and "webpack-cli" and create a default L</config>. Does
nothing if this is already done.

This method is automatically called by L</build> and L</watch>.

=head2 pid

  $int = $webpack->pid;

Returns the PID of the webpack process started by L</start>.

=head2 stop

  $webpack->stop;

Will stop the process started by L</watch>. Does nothing if L</watch> has not
been called.

=head2 watch

  $webpack->watch;

Forks a new process that runs "webpack watch". This means that any changes will
generate new assets. This is much more efficient than calling L</build> over
and over again. Automatically calls L</init>.

=head1 SEE ALSO

L<Mojolicious::Plugin::Webpack> and L<Mojo::Alien::rollup>.

=cut

__DATA__
@@ package-css-loader.js
module.exports = function(config) {
  const MiniCssExtractPlugin = require('mini-css-extract-plugin');
  config.module.rules.push({
    test: /\.css$/,
    use: [MiniCssExtractPlugin.loader, {loader: 'css-loader', options: {sourceMap: true}}],
  });
};
@@ package-css-minimizer-webpack-plugin.js
module.exports = function(config) {
  const OptimizeCSSAssetsPlugin = require('css-minimizer-webpack-plugin');
  config.optimization.minimizer.push(new OptimizeCSSAssetsPlugin({}));
};
@@ package-mini-css-extract-plugin.js
module.exports = function(config) {
  const isDev = config.mode == 'development';
  const MiniCssExtractPlugin = require('mini-css-extract-plugin');
  config.plugins.push(new MiniCssExtractPlugin({filename: isDev ? '[name].development.css' : '[name].[contenthash].css'}));
};
@@ package-terser-webpack-plugin.js
module.exports = function(config) {
  const TerserPlugin = require('terser-webpack-plugin');
  config.optimization.minimizer.push(new TerserPlugin({parallel: true}));
  config.module.rules.push({
    test: /\.js$/,
    exclude: /node_modules/,
    use: {loader: 'babel-loader'},
  });
};
@@ webpack.config.js
const fs = require('fs');
const pkg = require('./package.json');
const path = require('path');

const assetsDir = process.env.WEBPACK_ASSETS_DIR || path.resolve(__dirname, 'assets');
const isDev = process.env.NODE_ENV !== 'production';

const config = {
  entry: {},
  mode: isDev ? 'development' : 'production',
  module: {rules: []},
  optimization: {minimizer: []},
  output: {},
  plugins: [],
};

config.output.filename = isDev ? '[name].development.js' : '[name].[chunkhash].js';
config.output.path = process.env.WEBPACK_OUT_DIR || path.resolve(__dirname, 'dist');
config.output.publicPath = '';

const entry = path.resolve(assetsDir, 'index.js');
if (fs.existsSync(entry)) config.entry[pkg.name.replace(/\W+/g, '-')] = entry;

(process.env.WEBPACK_INCLUDE || '').split(':').forEach(function(name) {
  if (name) require(path.resolve(assetsDir, 'webpack.config.d', name))(config);
});

// Legacy
const custom = path.resolve(assetsDir, 'webpack.custom.js');
if (fs.existsSync(custom)) require(custom)(config);

module.exports = config;
